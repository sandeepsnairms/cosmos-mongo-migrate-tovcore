@inject Service.JobManager JobManager


<div class="modal fade show d-block bg-dark bg-opacity-75" id="myModal" aria-modal="true" role="dialog">
    <div class="modal-dialog bg-dark">
        <div class="modal-content">
            <div class="modal-header">
                <h4 class="modal-title">@(NewMode==true ? "New Job Details" : "Provide Connections Strings")</h4>
                <button type="button" class="btn-close" aria-label="Close" @onclick="@Cancel"></button>
            </div>
            <div class="modal-body">              

                <div class="mb-3">
                    <label for="name" class="form-label">Name</label>
                    <input type="text" id="name" class="form-control" disabled="@(!NewMode)" @bind="Name" />
                </div>

                <div class="mb-3">
                    <label class="form-label">Online</label>
                    <input type="checkbox" id="isOnline" disabled="@(!NewMode)" @bind="IsOnline" />
                </div>

                <div class="mb-3">
                    <label for="sourceConnectionString" class="form-label">Source Connection String</label>
                    <input type="text" id="sourceConnectionString" placeholder="@(NewMode==false ?"For " +SourceEndpoint :"")" class="form-control" @bind="SourceConnectionString" />
                </div>

                <div class="mb-3">
                    <label for="targetConnectionString" class="form-label">Target Connection String</label>
                    <input type="text" id="targetConnectionString" placeholder="@(NewMode==false ?"For " +TargetEndpoint :"For [account name].mongocluster.cosmos.azure.com")" class="form-control" @bind="TargetConnectionString" />
                </div>


                <div class="mb-3">
                    <label for="nameSpaces" class="form-label">Collections To Migrate</label>
                    <textarea type="text" id="nameSpaces" disabled="@(!NewMode)" rows="4" placeholder="e.g. db1.col1,db1.col2,db2.col1,db2.col5" class="form-control" @bind="Namespaces" />
                </div>

                @if (!string.IsNullOrEmpty(ErrorMessage))
                {
                    <div class="alert alert-danger mt-2">@ErrorMessage</div>
                }

            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-primary"
                @onclick=@HandleSubmit>
                    Ok
                </button>
                <button type="button" class="btn btn-secondary"
                @onclick="@Cancel">
                    Cancel
                </button>
            </div>
        </div>
    </div>
</div>

@code {

    [Parameter]
    public bool NewMode { get; set; }


    [Parameter]
    public string Name { get; set; } = string.Empty;

    [Parameter]
    public bool IsOnline { get; set; }


    [Parameter]
    public string SourceEndpoint { get; set; } = string.Empty;

    [Parameter]
    public string TargetEndpoint { get; set; } = string.Empty;

    [Parameter]
    public string Namespaces { get; set; } = string.Empty;

    public string SourceConnectionString { get; set; } = string.Empty;

    public string TargetConnectionString { get; set; } = string.Empty;


    [Parameter]
    public EventCallback<OnlineMongoMigrationProcessor.MigrationJob> OnSubmit { get; set; }

    private string ErrorMessage;

    public Tuple<bool, string> ValidateNameSpaceFormat(string input)
    {
        // // Regular expression pattern to match db1.col1,db2.col2,db3.col4 format
        // string pattern = @"^[a-zA-Z0-9_]+\.[a-zA-Z0-9_]+$";
        // System.Text.RegularExpressions.Regex regex = new System.Text.RegularExpressions.Regex(pattern);
        // return regex.IsMatch(input);

        string pattern = @"^[a-zA-Z0-9_]+\.[a-zA-Z0-9_]+$";

        // Split the input by commas
        string[] items = input.Split(',');

        List<string> validItems = new List<string>();

        foreach (string item in items)
        {
            string trimmedItem = item.Trim(); // Remove any extra whitespace
            if (System.Text.RegularExpressions.Regex.IsMatch(trimmedItem, pattern))
            {
                Console.WriteLine($"'{trimmedItem}' matches the pattern.");
                validItems.Add(trimmedItem);
            }
            else
            {
                return new Tuple<bool,string>(false,string.Empty);
            }
        }

        // Join valid items into a cleaned comma-separated list
        var cleanedNamespace = string.Join(",", validItems);
        return new Tuple<bool, string>(true, cleanedNamespace);
    }

    private void HandleSubmit()
    {
        if (string.IsNullOrEmpty(Name))
        {
            ErrorMessage = "Name can't be empty.";
            return;
        }

        var tmpSrcEndpoint = JobManager.ExtractHost(SourceConnectionString);
        if (tmpSrcEndpoint != SourceEndpoint && !NewMode)
        {
            ErrorMessage = "Source endpoint doesn't match provided Source Connection String.";
            return;
        }

        var tmpTgtEndpoint = JobManager.ExtractHost(TargetConnectionString);
        if (tmpTgtEndpoint != TargetEndpoint && !NewMode)
        {
            ErrorMessage = "Target endpoint doesn't match provided Target Connection String.";
            return;
        }

        if (tmpTgtEndpoint == tmpSrcEndpoint)
        {
            ErrorMessage = "Target and Source endpoints can't be the same.";
            return;
        }

        if(NewMode)
        {
            Tuple<bool, string> retValue = ValidateNameSpaceFormat(Namespaces);
            if (retValue.Item1 == false)
            {
                ErrorMessage = "Namespaces Format is invalid.";
                return;
            }
            else
                Namespaces = retValue.Item2;
        }

        OnlineMongoMigrationProcessor.MigrationJob job = new OnlineMongoMigrationProcessor.MigrationJob();
        job.Name = Name;
        job.Id = Guid.NewGuid().ToString();
        job.IsOnline = IsOnline;
        job.SourceConnectionString = SourceConnectionString;
        job.TargetConnectionString = TargetConnectionString;
        job.SourceEndpoint = tmpSrcEndpoint;
        job.TargetEndpoint = tmpTgtEndpoint;
        job.NameSpaces = Namespaces;        

        OnSubmit.InvokeAsync(job);
               
    }

    private Task Cancel()
    {
        return OnSubmit.InvokeAsync(null);
    }
}
